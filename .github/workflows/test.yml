name: NETOPT Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats bc iproute2 iputils-ping

    - name: Install BATS libraries
      run: |
        sudo apt-get install -y bats-support bats-assert || true

    - name: Run unit tests - interface detection
      run: |
        bats tests/unit/test_interface_detection.bats

    - name: Run unit tests - weight calculation
      run: |
        bats tests/unit/test_weight_calculation.bats

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: tests/unit/*.log
        if-no-files-found: ignore

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats bc iproute2 iputils-ping bridge-utils

    - name: Setup network capabilities
      run: |
        # Enable network namespace creation
        sudo sysctl -w kernel.unprivileged_userns_clone=1 || true

    - name: Run integration tests
      run: |
        sudo bats tests/integration/test_multi_interface.bats

    - name: Cleanup network resources
      if: always()
      run: |
        sudo tests/integration/network_simulator.sh cleanup || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: tests/integration/*.log
        if-no-files-found: ignore

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc iproute2 iputils-ping

    - name: Run performance benchmarks
      run: |
        sudo tests/performance/benchmark.sh all

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: tests/performance/results/*.txt
        if-no-files-found: ignore

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const resultsDir = 'tests/performance/results';
          if (fs.existsSync(resultsDir)) {
            const files = fs.readdirSync(resultsDir);
            if (files.length > 0) {
              const latestResult = files.sort().reverse()[0];
              const results = fs.readFileSync(`${resultsDir}/${latestResult}`, 'utf8');
              const body = `## Performance Benchmark Results\n\n\`\`\`\n${results}\n\`\`\``;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          }

  shellcheck:
    name: Shell Script Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck on main script
      run: |
        shellcheck network-optimize.sh || true

    - name: Run ShellCheck on test scripts
      run: |
        find tests -name "*.sh" -type f -exec shellcheck {} \; || true

    - name: Run ShellCheck on installer
      run: |
        shellcheck install-network-optimize.sh || true
        shellcheck safe-install.sh || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for hardcoded secrets
      run: |
        # Simple grep for common secret patterns
        ! grep -r -E '(password|secret|api[_-]?key|token)\s*=\s*["\047][^"\047]+["\047]' \
          --include="*.sh" --include="*.bash" . || \
          echo "Warning: Potential secrets found"

    - name: Check for dangerous commands
      run: |
        # Check for potentially dangerous command patterns
        ! grep -r -E '(rm\s+-rf\s+/[^/]|mkfs|dd\s+if=.*of=/dev/)' \
          --include="*.sh" --include="*.bash" . || \
          echo "Warning: Dangerous commands found"

  compatibility-test:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu-version: ['20.04', '22.04', '24.04']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test on Ubuntu ${{ matrix.ubuntu-version }}
      run: |
        docker run --rm -v $PWD:/netopt ubuntu:${{ matrix.ubuntu-version }} bash -c "
          apt-get update &&
          apt-get install -y bats bc iproute2 iputils-ping &&
          cd /netopt &&
          bats tests/unit/test_interface_detection.bats
        " || echo "Tests completed with status $?"

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats bc iproute2

    - name: Install kcov for bash coverage
      run: |
        sudo apt-get install -y kcov || true

    - name: Generate coverage report
      run: |
        # Run tests with coverage if kcov is available
        if command -v kcov >/dev/null 2>&1; then
          mkdir -p coverage
          kcov coverage bats tests/unit/test_interface_detection.bats || true
        else
          echo "kcov not available, skipping coverage"
        fi

    - name: Upload coverage to codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/kcov-merged/cobertura.xml
        fail_ci_if_error: false

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, shellcheck]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ShellCheck: ${{ needs.shellcheck.result }}" >> $GITHUB_STEP_SUMMARY

    - name: Fail if critical tests failed
      if: |
        needs.unit-tests.result == 'failure' ||
        needs.integration-tests.result == 'failure'
      run: exit 1
